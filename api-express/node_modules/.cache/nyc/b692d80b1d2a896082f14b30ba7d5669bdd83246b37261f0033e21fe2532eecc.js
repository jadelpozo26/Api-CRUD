var cov_xiazvx5jm=function(){var path="C:\\Users\\jadel\\Desktop\\Api-CRUD\\api-express\\pruebasconbase.js";var hash="88366b5c95542c22d1ed851338600dd361afe0a0";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\jadel\\Desktop\\Api-CRUD\\api-express\\pruebasconbase.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:16}},"1":{start:{line:2,column:14},end:{line:2,column:30}},"2":{start:{line:3,column:19},end:{line:3,column:34}},"3":{start:{line:4,column:15},end:{line:4,column:34}},"4":{start:{line:5,column:0},end:{line:5,column:62}},"5":{start:{line:6,column:18},end:{line:6,column:38}},"6":{start:{line:7,column:76},end:{line:7,column:99}},"7":{start:{line:9,column:0},end:{line:690,column:2}},"8":{start:{line:11,column:4},end:{line:13,column:6}},"9":{start:{line:12,column:8},end:{line:12,column:33}},"10":{start:{line:16,column:4},end:{line:33,column:6}},"11":{start:{line:17,column:24},end:{line:17,column:46}},"12":{start:{line:18,column:27},end:{line:18,column:41}},"13":{start:{line:19,column:25},end:{line:19,column:39}},"14":{start:{line:20,column:24},end:{line:20,column:38}},"15":{start:{line:21,column:25},end:{line:21,column:39}},"16":{start:{line:24,column:8},end:{line:27,column:9}},"17":{start:{line:28,column:8},end:{line:31,column:25}},"18":{start:{line:29,column:12},end:{line:29,column:51}},"19":{start:{line:30,column:8},end:{line:30,column:53}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:33},end:{line:9,column:34}},loc:{start:{line:9,column:44},end:{line:690,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:15},end:{line:11,column:16}},loc:{start:{line:11,column:21},end:{line:13,column:5}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:16,column:28},end:{line:16,column:29}},loc:{start:{line:16,column:40},end:{line:33,column:5}},line:16},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:60},end:{line:28,column:61}},loc:{start:{line:28,column:64},end:{line:31,column:9}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:31,column:17},end:{line:31,column:18}},loc:{start:{line:31,column:22},end:{line:31,column:24}},line:31}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"88366b5c95542c22d1ed851338600dd361afe0a0"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_xiazvx5jm.s[0]++;require('mocha');const sinon=(cov_xiazvx5jm.s[1]++,require('sinon'));const{expect}=(cov_xiazvx5jm.s[2]++,require('chai'));var mongoose=(cov_xiazvx5jm.s[3]++,require('mongoose'));cov_xiazvx5jm.s[4]++;mongoose.connect('mongodb://localhost:27017/EquiposdeFutbol');var Futbolistas=(cov_xiazvx5jm.s[5]++,require('./base.js'));const{getAllFutbolistas,getFutbo,createfutbolista,updateid,deleteid}=(cov_xiazvx5jm.s[6]++,require('./funciones'));cov_xiazvx5jm.s[7]++;describe('Futbolistas Describe',function(){cov_xiazvx5jm.f[0]++;let Futbolistas;cov_xiazvx5jm.s[8]++;beforeEach(()=>{cov_xiazvx5jm.f[1]++;cov_xiazvx5jm.s[9]++;Futbolistas=Futbolistas;});//read all users
cov_xiazvx5jm.s[10]++;it('will get all users',async()=>{cov_xiazvx5jm.f[2]++;const sandbox=(cov_xiazvx5jm.s[11]++,sinon.sandbox.create());const statusMock=(cov_xiazvx5jm.s[12]++,sandbox.stub());const jsonMock=(cov_xiazvx5jm.s[13]++,sandbox.stub());const reqMock=(cov_xiazvx5jm.s[14]++,sandbox.stub());const nextMock=(cov_xiazvx5jm.s[15]++,sandbox.stub());const res=(cov_xiazvx5jm.s[16]++,{status:statusMock,send:jsonMock});cov_xiazvx5jm.s[17]++;await getAllFutbolistas(reqMock,res,nextMock).then(()=>{cov_xiazvx5jm.f[3]++;cov_xiazvx5jm.s[18]++;sinon.assert.calledWith(statusMock,200);cov_xiazvx5jm.s[19]++;sinon.assert.calledWith(jsonMock,Futbolistas);}).catch(()=>{cov_xiazvx5jm.f[4]++;});});//read un usuario
/*it('will get one futbolista',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const reqMock = {
            params: {
                id: 1
            }
        }
        const nextMock = sandbox.stub()

        const response = {
            id: 1, nombre: 'Lorenzo', apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-1999', equipo: 'Napoli'
        }
        
        
        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
        getFutbo(reqMock, res)
        sinon.assert.calledWith(statusMock,200)
        sinon.assert.calledWith(jsonMock,response)
    })

    it('will get one futbolista',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const reqMock = {
            params: {
                id: 4
            }
        }
        const nextMock = sandbox.stub()

        
        
        
        const res = 
        {
            status: statusMock,
         
        }
        getFutbo(reqMock, res)
        sinon.assert.calledWith(statusMock,404)
    })

    //create
    it('will create user',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: 'Lorenzo', apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
        const respuesta = "El Futbolista se agrego con exito"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,201)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user nombre require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"nombre\" is required"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user nombre max25',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzojfdklsañjfdkalsñfjdlksafjdsalñk",apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"nombre\" length must be less than or equal to 15 characters long"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user nombre require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"nombre\" is required"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user apellido max25',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo",apellido: 'apellidofdsajfdasfdasfdsafdsa', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"apellido\" length must be less than or equal to 25 characters long"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user apellido require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo", lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"apellido\" is required"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user fechanac formato incorrecto',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo",apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-29', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }

    const respuesta = "La fecha no esta en el formato correcto"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user lugarnac require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo", apellido: "hola", fechanac: '21-12-2199', equipo: 'Napoli'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"lugarnac\" is required"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user equipo max25',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo",apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napolifjdklasfjdkalsñfjdaslkf'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"equipo\" length must be less than or equal to 25 characters long"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user equipo require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo", apellido:"hola", lugarnac: 'italia', fechanac: '21-12-2199'
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"equipo\" is required"
        createfutbolista(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    //update
    it('will update user',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()

        

        const reqMock = {
            body: {
                nombre: 'Lorenzo', apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                },
                 params: {
                    id: 1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
        const respuesta = "El Futbolista se actualizo con exito"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,204)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will err update futbolista',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const reqMock = {
            params: {
                id: 12
            }
        }
        const nextMock = sandbox.stub()

        
        
        
        const res = 
        {
            status: statusMock,
            send:jsonMock
         
        }
        const respuesta = "El ID no existe"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,404)
        sinon.assert.calledWith(jsonMock, respuesta)

    })

    it('will erro update nombre require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"nombre\" is required"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro update nombre max25',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzojfdklsañjfdkalsñfjdlksafjdsalñk",apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"nombre\" length must be less than or equal to 15 characters long"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro update nombre require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"nombre\" is required"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro update apellido max25',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo",apellido: 'apellidofdsajfdasfdasfdsafdsa', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"apellido\" length must be less than or equal to 25 characters long"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user apellido require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo", lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napoli'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"apellido\" is required"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user fechanac formato incorrecto',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo",apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-29', equipo: 'Napoli'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }

    const respuesta = "La fecha no esta en el formato correcto"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user lugarnac require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo", apellido: "hola", fechanac: '21-12-2199', equipo: 'Napoli'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"lugarnac\" is required"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user equipo max25',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo",apellido: 'apellido', lugarnac: 'italia', fechanac: '21-12-2199', equipo: 'Napolifjdklasfjdkalsñfjdaslkf'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"equipo\" length must be less than or equal to 25 characters long"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    it('will erro user equipo require',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()


        const reqMock = {
            body: {
                nombre: "Lorenzo", apellido:"hola", lugarnac: 'italia', fechanac: '21-12-2199'
                },
                params: {
                    id:1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
    const respuesta = "\"equipo\" is required"
        updateid(reqMock, res)
        sinon.assert.calledWith(statusMock,400)
        sinon.assert.calledWith(jsonMock, respuesta)
    })


    //delete

    it('will delete user',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const nextMock = sandbox.stub()

        

        const reqMock = {
            body: {
                
                },
                 params: {
                    id: 1
                }
            }

        const res = 
        {
            status: statusMock,
            send: jsonMock
        }
        const respuesta = "Los datos fueron eliminados con exito"
        deleteid(reqMock, res)
        sinon.assert.calledWith(statusMock,204)
        sinon.assert.calledWith(jsonMock, respuesta)
    })

    
    it('will err delete futbolista',() => {
        const sandbox = sinon.sandbox.create()
        const statusMock = sandbox.stub()
        const jsonMock = sandbox.stub()
        const reqMock = {
            params: {
                id: 12
            }
        }
        const nextMock = sandbox.stub()

        
        
        
        const res = 
        {
            status: statusMock,
            send:jsonMock
         
        }
        const respuesta = "El ID no existe"
        deleteid(reqMock, res)
        sinon.assert.calledWith(statusMock,404)
        sinon.assert.calledWith(jsonMock, respuesta)

    })*/});